name: Build and Push to IPFS

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - main
    # Publish `v100` tags as releases.
    tags:
      - v*

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set IMAGE_TAG
        run: echo "IMAGE_TAG=$(echo ${{ github.repository }} | tr '[A-Z]' '[a-z]')" >> $GITHUB_ENV

      - name: Build image
        run: |
          docker build --file Dockerfile --tag $IMAGE_TAG .

      - name: Store IPFS hash reference
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "IPFS_HASH=$(docker run --entrypoint /bin/sh $IMAGE_TAG -c 'cat /ipfs_hash.txt')" >> $GITHUB_ENV

      - name: Create a release
        if: startsWith(github.ref, 'refs/tags/')
        env:
          REF_NAME: ${{ github.ref_name }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          IPFS_HASH: $IPFS_HASH
        run: |
          # Markdown template for the release notes
          read -r -d '' RELEASE_NOTE_TEMPLATE << EOF
          #### IPFS Hash

          \`\`\`
          $IPFS_HASH
          \`\`\`

          You can view published versions of Lunaria through IPFS Gateway

          [ipfs://$IPFS_HASH](ipfs://$IPFS_HASH) __(Recommended)__
          _requires Brave Browser or IPFS Desktop_
          [https://$IPFS_HASH.ipfs.nftstorage.link](https://$IPFS_HASH.ipfs.nftstorage.link)
          [https://$IPFS_HASH.ipfs.zoltu.io](https://$IPFS_HASH.ipfs.zoltu.io)
          [https://$IPFS_HASH.ipfs.keydonix.com](https://$IPFS_HASH.ipfs.keydonix.com)
          [https://$IPFS_HASH.ipfs.cf-ipfs.com](https://$IPFS_HASH.ipfs.cf-ipfs.com)
          [https://$IPFS_HASH.ipfs.w3s.link](https://$IPFS_HASH.ipfs.w3s.link)
          EOF

          # Generate payload for creating a new release
          read -r -d '' PAYLOAD_TEMPLATE <<EOF
          {
            "name": "$REF_NAME",
            "tag_name": "$REF_NAME",
            "target_commitish": "main",
            "body": $(echo "$RELEASE_NOTE_TEMPLATE" | jq -cRs '@json|fromjson'),
            "draft": false,
            "generate_release_notes": true
          }
          EOF

          # Create a github release
          # https://docs.github.com/en/rest/releases/releases?apiVersion=2022-11-28#create-a-release
          REQUEST_DATA=$(echo "$PAYLOAD_TEMPLATE" | jq -c)
          echo $REQUEST_DATA | curl \
            --silent \
            --location \
            --request POST \
            --header "Accept: application/vnd.github+json" \
            --header "Authorization: Bearer $GITHUB_TOKEN" \
            --header "X-GitHub-Api-Version: 2022-11-28" \
            --data @- \
            https://api.github.com/repos/$GITHUB_REPOSITORY/releases
